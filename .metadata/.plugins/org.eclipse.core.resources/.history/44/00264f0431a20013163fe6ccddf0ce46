package com.sp.mall.data;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.sp.mall.R;

public class ImageAdapter extends BaseAdapter {
	int[] arrayImage = new int[]{R.drawable.mall1,
								R.drawable.mall2,
								R.drawable.mall3,
								R.drawable.mall4,
								R.drawable.mall5};
	
	String[] arrayStringMall = new String[]{
								"mall1","mall2","mall3",
								"mall4","mall5"};
	private Resources resources;
	private LayoutInflater inflater;
	public ImageAdapter(Context context){
		this.resources=context.getResources();
		this.inflater = LayoutInflater.from(context);
	}

	@Override
	public int getCount() {
		return arrayImage.length;
	}

	@Override
	public Object getItem(int arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long getItemId(int arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup arg2) {
		if(convertView ==null){
			convertView = inflater.inflate(R.layout.list_image, null);
			TextView txtName = (TextView) convertView.findViewById(R.id.txtComment);
			ImageView imgMall = (ImageView) convertView.findViewById(R.id.imageMall);
			txtName.setText(arrayStringMall[position]);
			imgMall.setImageBitmap(decodeSampleBitmapFromResource(resources,arrayImage[position],400,200));
		}
		return convertView;
	}
	public static Bitmap decodeSampleBitmapFromResource(Resources res, int resId, int reqWidth,int reqHight){
		final BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		BitmapFactory.decodeResource(res,resId,options);
		options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHight);
		options.inJustDecodeBounds = false;
		return BitmapFactory.decodeResource(res, resId,options);
	}
	
	public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
	    // Raw height and width of image
	    final int height = options.outHeight;
	    final int width = options.outWidth;
	    int inSampleSize = 1;

	    if (height > reqHeight || width > reqWidth) {

	        // Calculate ratios of height and width to requested height and width
	        final int heightRatio = Math.round((float) height / (float) reqHeight);
	        final int widthRatio  = Math.round((float) width / (float) reqWidth);

	        // Choose the smallest ratio as inSampleSize value, this will guarantee
	        // a final image with both dimensions larger than or equal to the
	        // requested height and width.
	        inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
	    }

	    return inSampleSize;
	}
}
